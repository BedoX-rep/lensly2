-- Enable RLS (Row Level Security)
alter table products enable row level security;
alter table clients enable row level security;
alter table receipts enable row level security;
alter table receipt_items enable row level security;

-- Drop existing tables if they exist
drop table if exists receipt_items;
drop table if exists receipts;
drop table if exists products;
drop table if exists clients;

-- Create products table with user_id
create table products (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) not null,
    name text not null,
    price numeric not null,
    position integer not null default 0,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create clients table with user_id
create table clients (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) not null,
    name text not null,
    phone text not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create receipts table with user_id
create table receipts (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) not null,
    client_id uuid references clients(id) not null,
    right_eye_sph numeric,
    right_eye_cyl numeric,
    right_eye_axe numeric,
    left_eye_sph numeric,
    left_eye_cyl numeric,
    left_eye_axe numeric,
    subtotal numeric not null default 0,
    tax numeric not null default 0,
    total numeric not null default 0,
    discount_percentage numeric,
    discount_amount numeric,
    advance_payment numeric default 0,
    balance numeric not null default 0,
    delivery_status text not null default 'Undelivered',
    montage_status text not null default 'UnOrdered',
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create receipt_items table
create table receipt_items (
    id uuid primary key default uuid_generate_v4(),
    receipt_id uuid references receipts(id) on delete cascade not null,
    product_id uuid references products(id),
    custom_item_name text,
    price numeric not null,
    quantity integer not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create RLS policies
create policy "Users can only see their own products"
on products for all
using (auth.uid() = user_id);

create policy "Users can only see their own clients"
on clients for all
using (auth.uid() = user_id);

create policy "Users can only see their own receipts"
on receipts for all
using (auth.uid() = user_id);

create policy "Users can only see their own receipt items"
on receipt_items for all
using (
    auth.uid() in (
        select user_id from receipts where id = receipt_items.receipt_id
    )
);

-- Create indexes for better performance
create index idx_products_user_id on products(user_id);
create index idx_clients_user_id on clients(user_id);
create index idx_receipts_user_id on receipts(user_id);
create index idx_receipts_client_id on receipts(client_id);
create index idx_receipt_items_receipt_id on receipt_items(receipt_id);
create index idx_receipt_items_product_id on receipt_items(product_id);

-- Create function to update product positions
create or replace function update_positions(moved_id uuid, new_pos integer)
returns void as $$
declare
    current_user_id uuid;
begin
    -- Get the current user's ID
    current_user_id := auth.uid();
    
    update products
    set position = case
        when position >= new_pos then position + 1
        else position
    end
    where user_id = current_user_id
    and position >= new_pos;

    update products
    set position = new_pos
    where id = moved_id
    and user_id = current_user_id;
end;
$$ language plpgsql security definer;